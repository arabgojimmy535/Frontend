{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/es.array.push.js\";\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst stringToByteArray$1 = function (str) {\n  // TODO(user): Use native implementations if/when available\n  const out = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = c >> 6 | 192;\n      out[p++] = c & 63 | 128;\n    } else if ((c & 0xfc00) === 0xd800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = c >> 18 | 240;\n      out[p++] = c >> 12 & 63 | 128;\n      out[p++] = c >> 6 & 63 | 128;\n      out[p++] = c & 63 | 128;\n    } else {\n      out[p++] = c >> 12 | 224;\n      out[p++] = c >> 6 & 63 | 128;\n      out[p++] = c & 63 | 128;\n    }\n  }\n  return out;\n};\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\nconst byteArrayToString = function (bytes) {\n  // TODO(user): Use native implementations if/when available\n  const out = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);\n    }\n  }\n  return out.join('');\n};\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nconst base64 = {\n  /**\r\n   * Maps bytes to characters.\r\n   */\n  byteToCharMap_: null,\n  /**\r\n   * Maps characters to bytes.\r\n   */\n  charToByteMap_: null,\n  /**\r\n   * Maps bytes to websafe characters.\r\n   * @private\r\n   */\n  byteToCharMapWebSafe_: null,\n  /**\r\n   * Maps websafe characters to bytes.\r\n   * @private\r\n   */\n  charToByteMapWebSafe_: null,\n  /**\r\n   * Our default alphabet, shared between\r\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n   */\n  ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n  /**\r\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n  /**\r\n   * Our websafe alphabet.\r\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n  /**\r\n   * Whether this browser supports the atob and btoa functions. This extension\r\n   * started at Mozilla but is now implemented by many browsers. We use the\r\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n   * but still allowing the standard per-browser compilations.\r\n   *\r\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n  /**\r\n   * Base64-encode an array of bytes.\r\n   *\r\n   * @param input An array of bytes (numbers with\r\n   *     value in [0, 255]) to encode.\r\n   * @param webSafe Boolean indicating we should use the\r\n   *     alternative alphabet.\r\n   * @return The base64 encoded string.\r\n   */\n  encodeByteArray(input, webSafe) {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n    this.init_();\n    const byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;\n    const output = [];\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n      const outByte1 = byte1 >> 2;\n      const outByte2 = (byte1 & 0x03) << 4 | byte2 >> 4;\n      let outByte3 = (byte2 & 0x0f) << 2 | byte3 >> 6;\n      let outByte4 = byte3 & 0x3f;\n      if (!haveByte3) {\n        outByte4 = 64;\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n      output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\n    }\n    return output.join('');\n  },\n  /**\r\n   * Base64-encode a string.\r\n   *\r\n   * @param input A string to encode.\r\n   * @param webSafe If true, we should use the\r\n   *     alternative alphabet.\r\n   * @return The base64 encoded string.\r\n   */\n  encodeString(input, webSafe) {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray$1(input), webSafe);\n  },\n  /**\r\n   * Base64-decode a string.\r\n   *\r\n   * @param input to decode.\r\n   * @param webSafe True if we should use the\r\n   *     alternative alphabet.\r\n   * @return string representing the decoded value.\r\n   */\n  decodeString(input, webSafe) {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n  /**\r\n   * Base64-decode a string.\r\n   *\r\n   * In base-64 decoding, groups of four characters are converted into three\r\n   * bytes.  If the encoder did not apply padding, the input length may not\r\n   * be a multiple of 4.\r\n   *\r\n   * In this case, the last group will have fewer than 4 characters, and\r\n   * padding will be inferred.  If the group has one or two characters, it decodes\r\n   * to one byte.  If the group has three characters, it decodes to two bytes.\r\n   *\r\n   * @param input Input to decode.\r\n   * @param webSafe True if we should use the web-safe alphabet.\r\n   * @return bytes representing the decoded value.\r\n   */\n  decodeStringToByteArray(input, webSafe) {\n    this.init_();\n    const charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;\n    const output = [];\n    for (let i = 0; i < input.length;) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw Error();\n      }\n      const outByte1 = byte1 << 2 | byte2 >> 4;\n      output.push(outByte1);\n      if (byte3 !== 64) {\n        const outByte2 = byte2 << 4 & 0xf0 | byte3 >> 2;\n        output.push(outByte2);\n        if (byte4 !== 64) {\n          const outByte3 = byte3 << 6 & 0xc0 | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n    return output;\n  },\n  /**\r\n   * Lazy static initialization function. Called before\r\n   * accessing any of the static map variables.\r\n   * @private\r\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n/**\r\n * URL-safe base64 encoding\r\n */\nconst base64Encode = function (str) {\n  const utf8Bytes = stringToByteArray$1(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\nconst base64urlEncodeWithoutPadding = function (str) {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\nconst base64Decode = function (str) {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\nfunction isIndexedDBAvailable() {\n  return typeof indexedDB === 'object';\n}\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\nfunction validateIndexedDBOpenable() {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist = true;\n      const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n      request.onerror = () => {\n        var _a;\n        reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n */\nfunction getGlobal() {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;\n/**\r\n * Attempt to read defaults from a JSON string provided to\r\n * process.env.__FIREBASE_DEFAULTS__ or a JSON file whose path is in\r\n * process.env.__FIREBASE_DEFAULTS_PATH__\r\n */\nconst getDefaultsFromEnvVariable = () => {\n  if (typeof process === 'undefined' || typeof process.env === 'undefined') {\n    return;\n  }\n  const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\n  if (defaultsJsonString) {\n    return JSON.parse(defaultsJsonString);\n  }\n};\nconst getDefaultsFromCookie = () => {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  let match;\n  try {\n    match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\n  } catch (e) {\n    // Some environments such as Angular Universal SSR have a\n    // `document` object but error on accessing `document.cookie`.\n    return;\n  }\n  const decoded = match && base64Decode(match[1]);\n  return decoded && JSON.parse(decoded);\n};\n/**\r\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\r\n * (1) if such an object exists as a property of `globalThis`\r\n * (2) if such an object was provided on a shell environment variable\r\n * (3) if such an object exists in a cookie\r\n */\nconst getDefaults = () => {\n  try {\n    return getDefaultsFromGlobal() || getDefaultsFromEnvVariable() || getDefaultsFromCookie();\n  } catch (e) {\n    /**\r\n     * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\r\n     * to any environment case we have not accounted for. Log to\r\n     * info instead of swallowing so we can find these unknown cases\r\n     * and add paths for them if needed.\r\n     */\n    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\n    return;\n  }\n};\n/**\r\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\r\n * @public\r\n */\nconst getDefaultAppConfig = () => {\n  var _a;\n  return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config;\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Deferred {\n  constructor() {\n    this.reject = () => {};\n    this.resolve = () => {};\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n  /**\r\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n   */\n  wrapCallback(callback) {\n    return (error, value) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\nconst ERROR_NAME = 'FirebaseError';\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nclass FirebaseError extends Error {\n  constructor( /** The error code for this error. */\n  code, message, /** Custom data for this error. */\n  customData) {\n    super(message);\n    this.code = code;\n    this.customData = customData;\n    /** The custom name for all FirebaseErrors. */\n    this.name = ERROR_NAME;\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\nclass ErrorFactory {\n  constructor(service, serviceName, errors) {\n    this.service = service;\n    this.serviceName = serviceName;\n    this.errors = errors;\n  }\n  create(code, ...data) {\n    const customData = data[0] || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n    return error;\n  }\n}\nfunction replaceTemplate(template, data) {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\nconst PATTERN = /\\{\\$([^}]+)}/g;\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\nfunction deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n    const aProp = a[k];\n    const bProp = b[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isObject(thing) {\n  return thing !== null && typeof thing === 'object';\n}\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\nclass Component {\n  /**\r\n   *\r\n   * @param name The public service name, e.g. app, auth, firestore, database\r\n   * @param instanceFactory Service factory responsible for creating the public interface\r\n   * @param type whether the service provided by the component is public or private\r\n   */\n  constructor(name, instanceFactory, type) {\n    this.name = name;\n    this.instanceFactory = instanceFactory;\n    this.type = type;\n    this.multipleInstances = false;\n    /**\r\n     * Properties to be added to the service namespace\r\n     */\n    this.serviceProps = {};\n    this.instantiationMode = \"LAZY\" /* LAZY */;\n    this.onInstanceCreated = null;\n  }\n  setInstantiationMode(mode) {\n    this.instantiationMode = mode;\n    return this;\n  }\n  setMultipleInstances(multipleInstances) {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n  setServiceProps(props) {\n    this.serviceProps = props;\n    return this;\n  }\n  setInstanceCreatedCallback(callback) {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst DEFAULT_ENTRY_NAME$1 = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\nclass Provider {\n  constructor(name, container) {\n    this.name = name;\n    this.container = container;\n    this.component = null;\n    this.instances = new Map();\n    this.instancesDeferred = new Map();\n    this.instancesOptions = new Map();\n    this.onInitCallbacks = new Map();\n  }\n  /**\r\n   * @param identifier A provider can provide mulitple instances of a service\r\n   * if this.component.multipleInstances is true.\r\n   */\n  get(identifier) {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n      if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n    return this.instancesDeferred.get(normalizedIdentifier).promise;\n  }\n  getImmediate(options) {\n    var _a;\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\n    const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\n    if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n  getComponent() {\n    return this.component;\n  }\n  setComponent(component) {\n    if (component.name !== this.name) {\n      throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\n    }\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n    this.component = component;\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({\n          instanceIdentifier: DEFAULT_ENTRY_NAME$1\n        });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n  clearInstance(identifier = DEFAULT_ENTRY_NAME$1) {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete() {\n    const services = Array.from(this.instances.values());\n    await Promise.all([...services.filter(service => 'INTERNAL' in service) // legacy services\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    .map(service => service.INTERNAL.delete()), ...services.filter(service => '_delete' in service) // modularized services\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    .map(service => service._delete())]);\n  }\n  isComponentSet() {\n    return this.component != null;\n  }\n  isInitialized(identifier = DEFAULT_ENTRY_NAME$1) {\n    return this.instances.has(identifier);\n  }\n  getOptions(identifier = DEFAULT_ENTRY_NAME$1) {\n    return this.instancesOptions.get(identifier) || {};\n  }\n  initialize(opts = {}) {\n    const {\n      options = {}\n    } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\n    }\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    });\n    // resolve any pending promise waiting for the service instance\n    for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n    return instance;\n  }\n  /**\r\n   *\r\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n   *\r\n   * @param identifier An optional instance identifier\r\n   * @returns a function to unregister the callback\r\n   */\n  onInit(callback, identifier) {\n    var _a;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n  /**\r\n   * Invoke onInit callbacks synchronously\r\n   * @param instance the service instance`\r\n   */\n  invokeOnInitCallbacks(instance, identifier) {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch (_a) {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n  getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }) {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n      /**\r\n       * Invoke onInit listeners.\r\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n       * while onInit listeners are registered by consumers of the provider.\r\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n      /**\r\n       * Order is important\r\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n       * makes `isInitialized()` return true.\r\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\n        } catch (_a) {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n    return instance || null;\n  }\n  normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME$1) {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME$1;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  shouldAutoInitialize() {\n    return !!this.component && this.component.instantiationMode !== \"EXPLICIT\" /* EXPLICIT */;\n  }\n}\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier) {\n  return identifier === DEFAULT_ENTRY_NAME$1 ? undefined : identifier;\n}\nfunction isComponentEager(component) {\n  return component.instantiationMode === \"EAGER\" /* EAGER */;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\nclass ComponentContainer {\n  constructor(name) {\n    this.name = name;\n    this.providers = new Map();\n  }\n  /**\r\n   *\r\n   * @param component Component being added\r\n   * @param overwrite When a component with the same name has already been registered,\r\n   * if overwrite is true: overwrite the existing component with the new component and create a new\r\n   * provider with the new component. It can be useful in tests where you want to use different mocks\r\n   * for different tests.\r\n   * if overwrite is false: throw an exception\r\n   */\n  addComponent(component) {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\n    }\n    provider.setComponent(component);\n  }\n  addOrOverwriteComponent(component) {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n    this.addComponent(component);\n  }\n  /**\r\n   * getProvider provides a type safe interface where it can only be called with a field name\r\n   * present in NameServiceMapping interface.\r\n   *\r\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n   * themselves.\r\n   */\n  getProvider(name) {\n    if (this.providers.has(name)) {\n      return this.providers.get(name);\n    }\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider(name, this);\n    this.providers.set(name, provider);\n    return provider;\n  }\n  getProviders() {\n    return Array.from(this.providers.values());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A container for all of the Logger instances\r\n */\nconst instances = [];\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\nvar LogLevel;\n(function (LogLevel) {\n  LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\n  LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n  LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\n  LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\n  LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\nconst levelStringToEnum = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n/**\r\n * The default log level\r\n */\nconst defaultLogLevel = LogLevel.INFO;\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\nconst defaultLogHandler = (instance, logType, ...args) => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType];\n  if (method) {\n    console[method](`[${now}]  ${instance.name}:`, ...args);\n  } else {\n    throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\n  }\n};\nclass Logger {\n  /**\r\n   * Gives you an instance of a Logger to capture messages according to\r\n   * Firebase's logging scheme.\r\n   *\r\n   * @param name The name that the logs will be associated with\r\n   */\n  constructor(name) {\n    this.name = name;\n    /**\r\n     * The log level of the given Logger instance.\r\n     */\n    this._logLevel = defaultLogLevel;\n    /**\r\n     * The main (internal) log handler for the Logger instance.\r\n     * Can be set to a new function in internal package code but not by user.\r\n     */\n    this._logHandler = defaultLogHandler;\n    /**\r\n     * The optional, additional, user-defined log handler for the Logger instance.\r\n     */\n    this._userLogHandler = null;\n    /**\r\n     * Capture the current instance for later use\r\n     */\n    instances.push(this);\n  }\n  get logLevel() {\n    return this._logLevel;\n  }\n  set logLevel(val) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val) {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n  get logHandler() {\n    return this._logHandler;\n  }\n  set logHandler(val) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n  get userLogHandler() {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val) {\n    this._userLogHandler = val;\n  }\n  /**\r\n   * The functions below are all based on the `console` interface\r\n   */\n  debug(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args) {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\nfunction setLogLevel$1(level) {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\nfunction setUserLogHandler(logCallback, options) {\n  for (const instance of instances) {\n    let customLogLevel = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (instance, level, ...args) => {\n        const message = args.map(arg => {\n          if (arg == null) {\n            return null;\n          } else if (typeof arg === 'string') {\n            return arg;\n          } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n            return arg.toString();\n          } else if (arg instanceof Error) {\n            return arg.message;\n          } else {\n            try {\n              return JSON.stringify(arg);\n            } catch (ignored) {\n              return null;\n            }\n          }\n        }).filter(arg => arg).join(' ');\n        if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase(),\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\nconst instanceOfAny = (object, constructors) => constructors.some(c => object instanceof c);\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n  return idbProxyableTypes || (idbProxyableTypes = [IDBDatabase, IDBObjectStore, IDBIndex, IDBCursor, IDBTransaction]);\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n  return cursorAdvanceMethods || (cursorAdvanceMethods = [IDBCursor.prototype.advance, IDBCursor.prototype.continue, IDBCursor.prototype.continuePrimaryKey]);\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n  const promise = new Promise((resolve, reject) => {\n    const unlisten = () => {\n      request.removeEventListener('success', success);\n      request.removeEventListener('error', error);\n    };\n    const success = () => {\n      resolve(wrap(request.result));\n      unlisten();\n    };\n    const error = () => {\n      reject(request.error);\n      unlisten();\n    };\n    request.addEventListener('success', success);\n    request.addEventListener('error', error);\n  });\n  promise.then(value => {\n    // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n    // (see wrapFunction).\n    if (value instanceof IDBCursor) {\n      cursorRequestMap.set(value, request);\n    }\n    // Catching to avoid \"Uncaught Promise exceptions\"\n  }).catch(() => {});\n  // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n  // is because we create many promises from a single IDBRequest.\n  reverseTransformCache.set(promise, request);\n  return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n  // Early bail if we've already created a done promise for this transaction.\n  if (transactionDoneMap.has(tx)) return;\n  const done = new Promise((resolve, reject) => {\n    const unlisten = () => {\n      tx.removeEventListener('complete', complete);\n      tx.removeEventListener('error', error);\n      tx.removeEventListener('abort', error);\n    };\n    const complete = () => {\n      resolve();\n      unlisten();\n    };\n    const error = () => {\n      reject(tx.error || new DOMException('AbortError', 'AbortError'));\n      unlisten();\n    };\n    tx.addEventListener('complete', complete);\n    tx.addEventListener('error', error);\n    tx.addEventListener('abort', error);\n  });\n  // Cache it for later retrieval.\n  transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n  get(target, prop, receiver) {\n    if (target instanceof IDBTransaction) {\n      // Special handling for transaction.done.\n      if (prop === 'done') return transactionDoneMap.get(target);\n      // Polyfill for objectStoreNames because of Edge.\n      if (prop === 'objectStoreNames') {\n        return target.objectStoreNames || transactionStoreNamesMap.get(target);\n      }\n      // Make tx.store return the only store in the transaction, or undefined if there are many.\n      if (prop === 'store') {\n        return receiver.objectStoreNames[1] ? undefined : receiver.objectStore(receiver.objectStoreNames[0]);\n      }\n    }\n    // Else transform whatever we get back.\n    return wrap(target[prop]);\n  },\n  set(target, prop, value) {\n    target[prop] = value;\n    return true;\n  },\n  has(target, prop) {\n    if (target instanceof IDBTransaction && (prop === 'done' || prop === 'store')) {\n      return true;\n    }\n    return prop in target;\n  }\n};\nfunction replaceTraps(callback) {\n  idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n  // Due to expected object equality (which is enforced by the caching in `wrap`), we\n  // only create one new func per func.\n  // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n  if (func === IDBDatabase.prototype.transaction && !('objectStoreNames' in IDBTransaction.prototype)) {\n    return function (storeNames, ...args) {\n      const tx = func.call(unwrap(this), storeNames, ...args);\n      transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n      return wrap(tx);\n    };\n  }\n  // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n  // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n  // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n  // with real promises, so each advance methods returns a new promise for the cursor object, or\n  // undefined if the end of the cursor has been reached.\n  if (getCursorAdvanceMethods().includes(func)) {\n    return function (...args) {\n      // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n      // the original object.\n      func.apply(unwrap(this), args);\n      return wrap(cursorRequestMap.get(this));\n    };\n  }\n  return function (...args) {\n    // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n    // the original object.\n    return wrap(func.apply(unwrap(this), args));\n  };\n}\nfunction transformCachableValue(value) {\n  if (typeof value === 'function') return wrapFunction(value);\n  // This doesn't return, it just creates a 'done' promise for the transaction,\n  // which is later returned for transaction.done (see idbObjectHandler).\n  if (value instanceof IDBTransaction) cacheDonePromiseForTransaction(value);\n  if (instanceOfAny(value, getIdbProxyableTypes())) return new Proxy(value, idbProxyTraps);\n  // Return the same value back if we're not going to transform it.\n  return value;\n}\nfunction wrap(value) {\n  // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n  // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n  if (value instanceof IDBRequest) return promisifyRequest(value);\n  // If we've already transformed this value before, reuse the transformed value.\n  // This is faster, but it also provides object equality.\n  if (transformCache.has(value)) return transformCache.get(value);\n  const newValue = transformCachableValue(value);\n  // Not all types are transformed.\n  // These may be primitive types, so they can't be WeakMap keys.\n  if (newValue !== value) {\n    transformCache.set(value, newValue);\n    reverseTransformCache.set(newValue, value);\n  }\n  return newValue;\n}\nconst unwrap = value => reverseTransformCache.get(value);\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, {\n  blocked,\n  upgrade,\n  blocking,\n  terminated\n} = {}) {\n  const request = indexedDB.open(name, version);\n  const openPromise = wrap(request);\n  if (upgrade) {\n    request.addEventListener('upgradeneeded', event => {\n      upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n    });\n  }\n  if (blocked) request.addEventListener('blocked', () => blocked());\n  openPromise.then(db => {\n    if (terminated) db.addEventListener('close', () => terminated());\n    if (blocking) db.addEventListener('versionchange', () => blocking());\n  }).catch(() => {});\n  return openPromise;\n}\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n  if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === 'string')) {\n    return;\n  }\n  if (cachedMethods.get(prop)) return cachedMethods.get(prop);\n  const targetFuncName = prop.replace(/FromIndex$/, '');\n  const useIndex = prop !== targetFuncName;\n  const isWrite = writeMethods.includes(targetFuncName);\n  if (\n  // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n  !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))) {\n    return;\n  }\n  const method = async function (storeName, ...args) {\n    // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n    const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n    let target = tx.store;\n    if (useIndex) target = target.index(args.shift());\n    // Must reject if op rejects.\n    // If it's a write operation, must reject if tx.done rejects.\n    // Must reject with op rejection first.\n    // Must resolve with op value.\n    // Must handle both promises (no unhandled rejections)\n    return (await Promise.all([target[targetFuncName](...args), isWrite && tx.done]))[0];\n  };\n  cachedMethods.set(prop, method);\n  return method;\n}\nreplaceTraps(oldTraps => ({\n  ...oldTraps,\n  get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n  has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop)\n}));\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass PlatformLoggerServiceImpl {\n  constructor(container) {\n    this.container = container;\n  }\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString() {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers.map(provider => {\n      if (isVersionServiceProvider(provider)) {\n        const service = provider.getImmediate();\n        return `${service.library}/${service.version}`;\n      } else {\n        return null;\n      }\n    }).filter(logString => logString).join(' ');\n  }\n}\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\nfunction isVersionServiceProvider(provider) {\n  const component = provider.getComponent();\n  return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* VERSION */;\n}\n\nconst name$o = \"https://www.gstatic.com/firebasejs/9.12.1/firebase-app.js\";\nconst version$1 = \"0.8.2\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst logger = new Logger('https://www.gstatic.com/firebasejs/9.12.1/firebase-app.js');\nconst name$n = \"@firebase/app-compat\";\nconst name$m = \"@firebase/analytics-compat\";\nconst name$l = \"@firebase/analytics\";\nconst name$k = \"@firebase/app-check-compat\";\nconst name$j = \"@firebase/app-check\";\nconst name$i = \"@firebase/auth\";\nconst name$h = \"@firebase/auth-compat\";\nconst name$g = \"@firebase/database\";\nconst name$f = \"@firebase/database-compat\";\nconst name$e = \"@firebase/functions\";\nconst name$d = \"@firebase/functions-compat\";\nconst name$c = \"@firebase/installations\";\nconst name$b = \"@firebase/installations-compat\";\nconst name$a = \"@firebase/messaging\";\nconst name$9 = \"@firebase/messaging-compat\";\nconst name$8 = \"@firebase/performance\";\nconst name$7 = \"@firebase/performance-compat\";\nconst name$6 = \"@firebase/remote-config\";\nconst name$5 = \"@firebase/remote-config-compat\";\nconst name$4 = \"@firebase/storage\";\nconst name$3 = \"@firebase/storage-compat\";\nconst name$2 = \"@firebase/firestore\";\nconst name$1 = \"@firebase/firestore-compat\";\nconst name$p = \"firebase\";\nconst version$2 = \"9.12.1\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\nconst PLATFORM_LOG_STRING = {\n  [name$o]: 'fire-core',\n  [name$n]: 'fire-core-compat',\n  [name$l]: 'fire-analytics',\n  [name$m]: 'fire-analytics-compat',\n  [name$j]: 'fire-app-check',\n  [name$k]: 'fire-app-check-compat',\n  [name$i]: 'fire-auth',\n  [name$h]: 'fire-auth-compat',\n  [name$g]: 'fire-rtdb',\n  [name$f]: 'fire-rtdb-compat',\n  [name$e]: 'fire-fn',\n  [name$d]: 'fire-fn-compat',\n  [name$c]: 'fire-iid',\n  [name$b]: 'fire-iid-compat',\n  [name$a]: 'fire-fcm',\n  [name$9]: 'fire-fcm-compat',\n  [name$8]: 'fire-perf',\n  [name$7]: 'fire-perf-compat',\n  [name$6]: 'fire-rc',\n  [name$5]: 'fire-rc-compat',\n  [name$4]: 'fire-gcs',\n  [name$3]: 'fire-gcs-compat',\n  [name$2]: 'fire-fst',\n  [name$1]: 'fire-fst-compat',\n  'fire-js': 'fire-js',\n  [name$p]: 'fire-js-all'\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @internal\r\n */\nconst _apps = new Map();\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst _components = new Map();\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\nfunction _addComponent(app, component) {\n  try {\n    app.container.addComponent(component);\n  } catch (e) {\n    logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\n  }\n}\n/**\r\n *\r\n * @internal\r\n */\nfunction _addOrOverwriteComponent(app, component) {\n  app.container.addOrOverwriteComponent(component);\n}\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\nfunction _registerComponent(component) {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(`There were multiple attempts to register component ${componentName}.`);\n    return false;\n  }\n  _components.set(componentName, component);\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app, component);\n  }\n  return true;\n}\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\nfunction _getProvider(app, name) {\n  const heartbeatController = app.container.getProvider('heartbeat').getImmediate({\n    optional: true\n  });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return app.container.getProvider(name);\n}\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\nfunction _clearComponents() {\n  _components.clear();\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst ERRORS = {\n  [\"no-app\" /* NO_APP */]: \"No Firebase App '{$appName}' has been created - \" + 'call Firebase App.initializeApp()',\n  [\"bad-app-name\" /* BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\n  [\"duplicate-app\" /* DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\n  [\"app-deleted\" /* APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\n  [\"no-options\" /* NO_OPTIONS */]: 'Need to provide options, when not being deployed to hosting via source.',\n  [\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' + 'Firebase App instance.',\n  [\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\n  [\"idb-open\" /* IDB_OPEN */]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [\"idb-get\" /* IDB_GET */]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [\"idb-set\" /* IDB_WRITE */]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [\"idb-delete\" /* IDB_DELETE */]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\n};\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass FirebaseAppImpl {\n  constructor(options, config, container) {\n    this._isDeleted = false;\n    this._options = Object.assign({}, options);\n    this._config = Object.assign({}, config);\n    this._name = config.name;\n    this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* PUBLIC */));\n  }\n\n  get automaticDataCollectionEnabled() {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n  set automaticDataCollectionEnabled(val) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n  get name() {\n    this.checkDestroyed();\n    return this._name;\n  }\n  get options() {\n    this.checkDestroyed();\n    return this._options;\n  }\n  get config() {\n    this.checkDestroyed();\n    return this._config;\n  }\n  get container() {\n    return this._container;\n  }\n  get isDeleted() {\n    return this._isDeleted;\n  }\n  set isDeleted(val) {\n    this._isDeleted = val;\n  }\n  /**\r\n   * This function will throw an Error if the App has already been deleted -\r\n   * use before performing API actions on the App.\r\n   */\n  checkDestroyed() {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(\"app-deleted\" /* APP_DELETED */, {\n        appName: this._name\n      });\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\nconst SDK_VERSION = version$2;\nfunction initializeApp(_options, rawConfig = {}) {\n  let options = _options;\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = {\n      name\n    };\n  }\n  const config = Object.assign({\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false\n  }, rawConfig);\n  const name = config.name;\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(\"bad-app-name\" /* BAD_APP_NAME */, {\n      appName: String(name)\n    });\n  }\n  options || (options = getDefaultAppConfig());\n  if (!options) {\n    throw ERROR_FACTORY.create(\"no-options\" /* NO_OPTIONS */);\n  }\n\n  const existingApp = _apps.get(name);\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (deepEqual(options, existingApp.options) && deepEqual(config, existingApp.config)) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(\"duplicate-app\" /* DUPLICATE_APP */, {\n        appName: name\n      });\n    }\n  }\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n  const newApp = new FirebaseAppImpl(options, config, container);\n  _apps.set(name, newApp);\n  return newApp;\n}\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, {\n      appName: name\n    });\n  }\n  return app;\n}\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\nfunction getApps() {\n  return Array.from(_apps.values());\n}\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\nasync function deleteApp(app) {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(app.container.getProviders().map(provider => provider.delete()));\n    app.isDeleted = true;\n  }\n}\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\nfunction registerVersion(libraryKeyOrName, version, variant) {\n  var _a;\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [`Unable to register library \"${library}\" with version \"${version}\":`];\n    if (libraryMismatch) {\n      warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(new Component(`${library}-version`, () => ({\n    library,\n    version\n  }), \"VERSION\" /* VERSION */));\n}\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\nfunction onLog(logCallback, options) {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */);\n  }\n\n  setUserLogHandler(logCallback, options);\n}\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\nfunction setLogLevel(logLevel) {\n  setLogLevel$1(logLevel);\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\nlet dbPromise = null;\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDB(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(\"idb-open\" /* IDB_OPEN */, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\nasync function readHeartbeatsFromIndexedDB(app) {\n  var _a;\n  try {\n    const db = await getDbPromise();\n    return db.transaction(STORE_NAME).objectStore(STORE_NAME).get(computeKey(app));\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(\"idb-get\" /* IDB_GET */, {\n        originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\n  var _a;\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    return tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(\"idb-set\" /* IDB_WRITE */, {\n        originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\nfunction computeKey(app) {\n  return `${app.name}!${app.options.appId}`;\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\nclass HeartbeatServiceImpl {\n  constructor(container) {\n    this.container = container;\n    /**\r\n     * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n     * the header string.\r\n     * Stores one record per date. This will be consolidated into the standard\r\n     * format of one record per user agent string before being sent as a header.\r\n     * Populated from indexedDB when the controller is instantiated and should\r\n     * be kept in sync with indexedDB.\r\n     * Leave public for easier testing.\r\n     */\n    this._heartbeatsCache = null;\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n  /**\r\n   * Called to report a heartbeat. The function will generate\r\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n   * to IndexedDB.\r\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n   * already logged, subsequent calls to this function in the same day will be ignored.\r\n   */\n  async triggerHeartbeat() {\n    const platformLogger = this.container.getProvider('platform-logger').getImmediate();\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache === null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({\n        date,\n        agent\n      });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\n      const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n      const now = Date.now();\n      return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n    });\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n  /**\r\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n   * It also clears all heartbeats from memory as well as in IndexedDB.\r\n   *\r\n   * NOTE: Consuming product SDKs should not send the header if this method\r\n   * returns an empty string.\r\n   */\n  async getHeartbeatsHeader() {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (this._heartbeatsCache === null || this._heartbeatsCache.heartbeats.length === 0) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const {\n      heartbeatsToSend,\n      unsentEntries\n    } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\n    const headerString = base64urlEncodeWithoutPadding(JSON.stringify({\n      version: 2,\n      heartbeats: heartbeatsToSend\n    }));\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\nfunction getUTCDateString() {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\nclass HeartbeatStorageImpl {\n  constructor(app) {\n    this.app = app;\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck() {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable().then(() => true).catch(() => false);\n    }\n  }\n  /**\r\n   * Read all heartbeats.\r\n   */\n  async read() {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return {\n        heartbeats: []\n      };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      return idbHeartbeatObject || {\n        heartbeats: []\n      };\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject) {\n    var _a;\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject) {\n    var _a;\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [...existingHeartbeatsObject.heartbeats, ...heartbeatsObject.heartbeats]\n      });\n    }\n  }\n}\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\nfunction countBytes(heartbeatsCache) {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n  // heartbeatsCache wrapper properties\n  JSON.stringify({\n    version: 2,\n    heartbeats: heartbeatsCache\n  })).length;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction registerCoreComponents(variant) {\n  _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\n  _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\n  // Register `app` package.\n  registerVersion(name$o, version$1, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name$o, version$1, 'esm2017');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\nregisterCoreComponents('');\nvar name = \"firebase\";\nvar version = \"9.12.1\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nregisterVersion(name, version, 'cdn');\nexport { FirebaseError, SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };","map":{"version":3,"mappings":"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","names":["stringToByteArray","str","out","p","i","length","c","charCodeAt","byteArrayToString","bytes","pos","c1","String","fromCharCode","c2","c3","c4","u","join","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","Array","isArray","Error","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","push","encodeString","btoa","decodeString","decodeStringToByteArray","charToByteMap","charAt","haveByte4","byte4","base64Encode","utf8Bytes","base64","base64urlEncodeWithoutPadding","replace","base64Decode","e","console","error","indexedDB","Promise","resolve","reject","preExist","DB_CHECK_NAME","request","self","open","onsuccess","result","close","deleteDatabase","onupgradeneeded","onerror","message","window","global","getDefaultsFromGlobal","getGlobal","__FIREBASE_DEFAULTS__","getDefaultsFromEnvVariable","process","env","defaultsJsonString","JSON","parse","getDefaultsFromCookie","document","match","cookie","decoded","getDefaults","info","getDefaultAppConfig","config","constructor","promise","wrapCallback","callback","value","catch","ERROR_NAME","FirebaseError","code","customData","Object","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","replaceTemplate","fullMessage","PATTERN","_","key","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","isObject","deepEqual","thing","name","instanceFactory","type","setInstantiationMode","mode","instantiationMode","setMultipleInstances","multipleInstances","setServiceProps","props","serviceProps","setInstanceCreatedCallback","onInstanceCreated","DEFAULT_ENTRY_NAME","container","Map","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","instancesDeferred","has","deferred","Deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","getImmediate","options","optional","getComponent","component","setComponent","isComponentEager","instanceDeferred","entries","clearInstance","delete","instancesOptions","instances","services","from","values","all","filter","map","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","normalizedDeferredIdentifier","onInit","existingCallbacks","onInitCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","_a","normalizeIdentifierForFactory","undefined","addComponent","provider","getProvider","addOrOverwriteComponent","providers","Provider","getProviders","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","args","logLevel","now","Date","toISOString","method","_logLevel","val","TypeError","setLogLevel","logHandler","_logHandler","userLogHandler","_userLogHandler","debug","log","warn","level","forEach","inst","logCallback","customLogLevel","arg","toString","stringify","ignored","toLowerCase","instanceOfAny","object","constructors","some","idbProxyableTypes","cursorAdvanceMethods","getIdbProxyableTypes","IDBDatabase","IDBObjectStore","IDBIndex","IDBCursor","IDBTransaction","getCursorAdvanceMethods","advance","continue","continuePrimaryKey","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","promisifyRequest","unlisten","removeEventListener","success","wrap","addEventListener","then","cacheDonePromiseForTransaction","tx","done","complete","DOMException","idbProxyTraps","target","prop","receiver","objectStoreNames","objectStore","replaceTraps","wrapFunction","func","transaction","storeNames","call","unwrap","sort","apply","transformCachableValue","Proxy","IDBRequest","newValue","openDB","version","blocked","upgrade","blocking","terminated","openPromise","event","oldVersion","newVersion","db","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","storeName","store","index","shift","oldTraps","getPlatformInfoString","isVersionServiceProvider","library","logString","logger","Logger","PLATFORM_LOG_STRING","appName","appCompatName","analyticsName","analyticsCompatName","appCheckName","appCheckCompatName","authName","authCompatName","databaseName","databaseCompatName","functionsName","functionsCompatName","installationsName","installationsCompatName","messagingName","messagingCompatName","performanceName","performanceCompatName","remoteConfigName","remoteConfigCompatName","storageName","storageCompatName","firestoreName","firestoreCompatName","packageName","app","_registerComponent","componentName","_components","_apps","_addComponent","heartbeatController","triggerHeartbeat","_removeServiceInstance","_getProvider","clear","ERRORS","ERROR_FACTORY","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","Component","checkDestroyed","isDeleted","_isDeleted","rawConfig","existingApp","ComponentContainer","newApp","FirebaseAppImpl","initializeApp","deleteApp","libraryKeyOrName","variant","libraryMismatch","versionMismatch","warning","setUserLogHandler","setLogLevelImpl","DB_NAME","DB_VERSION","STORE_NAME","dbPromise","getDbPromise","createObjectStore","originalErrorMessage","readHeartbeatsFromIndexedDB","computeKey","idbGetError","writeHeartbeatsToIndexedDB","heartbeatObject","put","appId","MAX_HEADER_BYTES","STORED_HEARTBEAT_RETENTION_MAX_MILLIS","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","_heartbeatsCache","platformLogger","agent","date","getUTCDateString","lastSentHeartbeatDate","heartbeats","singleDateHeartbeat","hbTimestamp","valueOf","overwrite","getHeartbeatsHeader","heartbeatsToSend","unsentEntries","extractHeartbeatsForHeader","headerString","today","substring","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","countBytes","pop","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","isIndexedDBAvailable","validateIndexedDBOpenable","canUseIndexedDB","idbHeartbeatObject","heartbeatsObject","existingHeartbeatsObject","registerCoreComponents","PlatformLoggerServiceImpl","HeartbeatServiceImpl","registerVersion"],"sources":["../util/src/constants.ts","../util/src/crypt.ts","../util/src/environment.ts","../util/src/defaults.ts","../util/src/deferred.ts","../util/src/errors.ts","../util/src/obj.ts","../component/src/component.ts","../component/src/constants.ts","../component/src/provider.ts","../component/src/component_container.ts","../logger/src/logger.ts","../../node_modules/idb/build/wrap-idb-value.js","../../node_modules/idb/build/index.js","../app/src/platformLoggerService.ts","../app/src/logger.ts","../app/src/constants.ts","../app/src/internal.ts","../app/src/errors.ts","../app/src/firebaseApp.ts","../app/src/api.ts","../app/src/indexeddb.ts","../app/src/heartbeatService.ts","../app/src/registerCoreComponents.ts","../app/src/index.ts","app/index.cdn.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = {\n  /**\n   * @define {boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define {boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '${JSCORE_VERSION}'\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw Error();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  return typeof indexedDB === 'object';\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { getGlobal } from './environment';\n\n/**\n * Keys for experimental properties on the `FirebaseDefaults` object.\n * @public\n */\nexport type ExperimentalKey = 'authTokenSyncURL' | 'authIdTokenMaxAge';\n\n/**\n * An object that can be injected into the environment as __FIREBASE_DEFAULTS__,\n * either as a property of globalThis, a shell environment variable, or a\n * cookie.\n *\n * This object can be used to automatically configure and initialize\n * a Firebase app as well as any emulators.\n *\n * @public\n */\nexport interface FirebaseDefaults {\n  config?: Record<string, string>;\n  emulatorHosts?: Record<string, string>;\n  _authTokenSyncURL?: string;\n  _authIdTokenMaxAge?: number;\n  [key: string]: unknown;\n}\n\ndeclare global {\n  // Need `var` for this to work.\n  // eslint-disable-next-line no-var\n  var __FIREBASE_DEFAULTS__: FirebaseDefaults | undefined;\n}\n\nconst getDefaultsFromGlobal = (): FirebaseDefaults | undefined =>\n  getGlobal().__FIREBASE_DEFAULTS__;\n\n/**\n * Attempt to read defaults from a JSON string provided to\n * process.env.__FIREBASE_DEFAULTS__ or a JSON file whose path is in\n * process.env.__FIREBASE_DEFAULTS_PATH__\n */\nconst getDefaultsFromEnvVariable = (): FirebaseDefaults | undefined => {\n  if (typeof process === 'undefined' || typeof process.env === 'undefined') {\n    return;\n  }\n  const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\n  if (defaultsJsonString) {\n    return JSON.parse(defaultsJsonString);\n  }\n};\n\nconst getDefaultsFromCookie = (): FirebaseDefaults | undefined => {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  let match;\n  try {\n    match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\n  } catch (e) {\n    // Some environments such as Angular Universal SSR have a\n    // `document` object but error on accessing `document.cookie`.\n    return;\n  }\n  const decoded = match && base64Decode(match[1]);\n  return decoded && JSON.parse(decoded);\n};\n\n/**\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\n * (1) if such an object exists as a property of `globalThis`\n * (2) if such an object was provided on a shell environment variable\n * (3) if such an object exists in a cookie\n */\nconst getDefaults = (): FirebaseDefaults | undefined => {\n  try {\n    return (\n      getDefaultsFromGlobal() ||\n      getDefaultsFromEnvVariable() ||\n      getDefaultsFromCookie()\n    );\n  } catch (e) {\n    /**\n     * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\n     * to any environment case we have not accounted for. Log to\n     * info instead of swallowing so we can find these unknown cases\n     * and add paths for them if needed.\n     */\n    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\n    return;\n  }\n};\n\n/**\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\n * @public\n */\nexport const getDefaultEmulatorHost = (\n  productName: string\n): string | undefined => getDefaults()?.emulatorHosts?.[productName];\n\n/**\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\n * @public\n */\nexport const getDefaultEmulatorHostnameAndPort = (\n  productName: string\n): [hostname: string, port: number] | undefined => {\n  const host = getDefaultEmulatorHost(productName);\n  if (!host) {\n    return undefined;\n  }\n  const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\n  if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\n    throw new Error(`Invalid host ${host} with no separate hostname and port!`);\n  }\n  // eslint-disable-next-line no-restricted-globals\n  const port = parseInt(host.substring(separatorIndex + 1), 10);\n  if (host[0] === '[') {\n    // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\n    return [host.substring(1, separatorIndex - 1), port];\n  } else {\n    return [host.substring(0, separatorIndex), port];\n  }\n};\n\n/**\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\n * @public\n */\nexport const getDefaultAppConfig = (): Record<string, string> | undefined =>\n  getDefaults()?.config;\n\n/**\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\n * prefixed by \"_\")\n * @public\n */\nexport const getExperimentalSetting = <T extends ExperimentalKey>(\n  name: T\n): FirebaseDefaults[`_${T}`] =>\n  getDefaults()?.[`_${name}`] as FirebaseDefaults[`_${T}`];\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object {\n  return thing !== null && typeof thing === 'object';\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly _options: FirebaseOptions;\n  private readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  private _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual, getDefaultAppConfig } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    return db\n      .transaction(STORE_NAME)\n      .objectStore(STORE_NAME)\n      .get(computeKey(app)) as Promise<HeartbeatsInIndexedDB | undefined>;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    return tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache === null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache === null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      return idbHeartbeatObject || { heartbeats: [] };\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nregisterVersion(name, version, 'cdn');\nexport * from '@firebase/app';\n"]},"metadata":{},"sourceType":"module"}